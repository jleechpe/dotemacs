(setq package-enable-at-startup nil)

;; (declare-function elpaca-generate-autoloads "elpaca")
;; (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
;; (when-let ((elpaca-repo (expand-file-name "repos/elpaca/" elpaca-directory))
;;            (elpaca-build (expand-file-name "builds/elpaca/" elpaca-directory))
;;            (elpaca-target (if (file-exists-p elpaca-build) elpaca-build elpaca-repo))
;;            (elpaca-url  "https://www.github.com/progfolio/elpaca.git")
;;            ((add-to-list 'load-path elpaca-target))
;;            ((not (file-exists-p elpaca-repo)))
;;            (buffer (get-buffer-create "*elpaca-bootstrap*")))
;;   (condition-case-unless-debug err
;;       (progn
;;         (unless (zerop (call-process "git" nil buffer t "clone" elpaca-url elpaca-repo))
;;           (error "%s" (list (with-current-buffer buffer (buffer-string)))))
;;         (byte-recompile-directory elpaca-repo 0 'force)
;;         (require 'elpaca)
;;         (elpaca-generate-autoloads "elpaca" elpaca-repo)
;;         (kill-buffer buffer))
;;     ((error)
;;      (delete-directory elpaca-directory 'recursive)
;;      (with-current-buffer buffer
;;        (goto-char (point-max))
;;        (insert (format "\n%S" err))
;;        (display-buffer buffer)))))
;; (require 'elpaca-autoloads)
;; (add-hook 'after-init-hook #'elpaca-process-queues)
;; (elpaca (elpaca :host github :repo "progfolio/elpaca"))

(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
